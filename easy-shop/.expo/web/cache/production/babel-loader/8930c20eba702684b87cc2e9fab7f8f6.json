{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{val}from\"../val\";import AnimatedNode from\"./AnimatedNode\";import invariant from'fbjs/lib/invariant';var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var float32ArraySupported=typeof Float32Array==='function';function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}function C(aA1){return 3.0*aA1;}function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){var currentX=0;var currentT=0;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function bezier(mX1,mY1,mX2,mY2){var sampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);if(mX1!==mY1||mX2!==mY2){for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}}function getTForX(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}var AnimatedBezier=function(_AnimatedNode){_inherits(AnimatedBezier,_AnimatedNode);var _super=_createSuper(AnimatedBezier);function AnimatedBezier(value,mX1,mY1,mX2,mY2){var _this;_classCallCheck(this,AnimatedBezier);invariant(value instanceof AnimatedNode,\"Reanimated: Bezier node argument should be of type AnimatedNode but got \".concat(value));_this=_super.call(this,{type:'bezier',mX1:mX1,mY1:mY1,mX2:mX2,mY2:mY2,input:value},[value]);_defineProperty(_assertThisInitialized(_this),\"_value\",void 0);_defineProperty(_assertThisInitialized(_this),\"_bezier\",void 0);_this._value=value;_this._bezier=bezier(mX1,mY1,mX2,mY2);return _this;}_createClass(AnimatedBezier,[{key:\"toString\",value:function toString(){return\"AnimatedBezier, id: \".concat(this.__nodeID);}},{key:\"__onEvaluate\",value:function __onEvaluate(){return this._bezier(val(this._value));}}]);return AnimatedBezier;}(AnimatedNode);export{AnimatedBezier as default};","map":{"version":3,"sources":["AnimatedBezier.js"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","A","B","C","currentX","currentT","i","aA","aB","calcBezier","Math","currentSlope","getSlope","aGuessT","sampleValues","mX1","mX2","intervalStart","currentSample","lastSample","dist","aX","guessForT","initialSlope","newtonRaphsonIterate","binarySubdivide","x","getTForX","constructor","invariant","value","type","mY1","mY2","input","bezier","toString","__onEvaluate","val"],"mappings":"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","sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  // Precompute samples table\n  var sampleValues = float32ArraySupported\n    ? new Float32Array(kSplineTableSize)\n    : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nexport default class AnimatedBezier extends AnimatedNode {\n  _value;\n  _bezier;\n\n  constructor(value, mX1, mY1, mX2, mY2) {\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Bezier node argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'bezier', mX1, mY1, mX2, mY2, input: value }, [\n      value,\n    ]);\n    this._value = value;\n    this._bezier = bezier(mX1, mY1, mX2, mY2);\n  }\n\n  toString() {\n    return `AnimatedBezier, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._bezier(val(this._value));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}