{"ast":null,"code":"import useCode from\"../derived/useCode\";import AnimatedNode from\"./AnimatedNode\";function assertNodesNotNull(code,children,exec){if(!code){var error=!children?\"Got \\\"\".concat(typeof children,\"\\\" type passed to children\"):\"Got \\\"\".concat(typeof exec,\"\\\" type passed to exec\");throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \".concat(error));}}function Code(_ref){var exec=_ref.exec,children=_ref.children,dependencies=_ref.dependencies;var nodes=children||exec;var code=null;if(nodes instanceof AnimatedNode){code=function code(){return nodes;};}else if(typeof nodes==='function'){code=nodes;}assertNodesNotNull(code,children,exec);useCode(code,dependencies);return null;}export default Code;","map":{"version":3,"sources":["AnimatedCode.js"],"names":["error","dependencies","nodes","children","code","assertNodesNotNull","useCode"],"mappings":"AAAA,MAAA,CAAA,OAAA,0BACA,MAAA,CAAA,YAAA,sBAEA,QAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAkD,CAChD,GAAI,CAAJ,IAAA,CAAW,CACT,GAAMA,CAAAA,KAAK,CAAG,CAAA,QAAA,CAAA,SAAA,MAAA,CACF,MADE,CAAA,QAAA,CAAA,4BAAA,CAAA,CAAA,SAAA,MAAA,CAEF,MAFE,CAAA,IAAA,CAAd,wBAAc,CAAd,CAIA,KAAM,IAAA,CAAA,KAAA,CAAA,0HAAA,MAAA,CAAN,KAAM,CAAA,CAAN,CAGD,CACF,CAED,QAAA,CAAA,IAAA,MAAgD,IAAlC,CAAA,IAAkC,MAAlC,IAAkC,CAAlC,QAAkC,MAAlC,QAAkC,CAAhBC,YAAgB,MAAhBA,YAAgB,CAC9C,GAAMC,CAAAA,KAAK,CAAGC,QAAQ,EAAtB,IAAA,CAEA,GAAIC,CAAAA,IAAI,CAAR,IAAA,CACA,GAAIF,KAAK,WAAT,CAAA,YAAA,CAAmC,CACjCE,IAAI,CAAG,sBAAPA,CAAAA,KAAO,EAAPA,CADF,CAAA,IAEO,IAAI,MAAA,CAAA,KAAA,GAAJ,UAAA,CAAiC,CACtCA,IAAI,CAAJA,KAAAA,CACD,CAEDC,kBAAkB,CAAA,IAAA,CAAA,QAAA,CAAlBA,IAAkB,CAAlBA,CAEAC,OAAO,CAAA,IAAA,CAAPA,YAAO,CAAPA,CACA,MAAA,KAAA,CACD,CAED,cAAA,CAAA,IAAA","sourcesContent":["import useCode from '../derived/useCode';\nimport AnimatedNode from './AnimatedNode';\n\nfunction assertNodesNotNull(code, children, exec) {\n  if (!code) {\n    const error = !children\n      ? `Got \"${typeof children}\" type passed to children`\n      : `Got \"${typeof exec}\" type passed to exec`;\n\n    throw new Error(\n      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\n    );\n  }\n}\n\nfunction Code({ exec, children, dependencies }) {\n  const nodes = children || exec;\n\n  let code = null;\n  if (nodes instanceof AnimatedNode) {\n    code = () => nodes;\n  } else if (typeof nodes === 'function') {\n    code = nodes;\n  }\n\n  assertNodesNotNull(code, children, exec);\n\n  useCode(code, dependencies);\n  return null;\n}\n\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}