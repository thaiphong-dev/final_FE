{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import AnimatedNode from\"./AnimatedNode\";import invariant from'fbjs/lib/invariant';import{val}from\"../val\";import{adapt}from\"../core/AnimatedBlock\";var AnimatedSet=function(_AnimatedNode){_inherits(AnimatedSet,_AnimatedNode);var _super=_createSuper(AnimatedSet);function AnimatedSet(what,value){var _this;_classCallCheck(this,AnimatedSet);invariant(what instanceof AnimatedNode,\"Reanimated: Animated.set first argument should be of type AnimatedNode but got \".concat(what));invariant(value instanceof AnimatedNode,\"Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got \".concat(value));_this=_super.call(this,{type:'set',what:what,value:value},[value]);_defineProperty(_assertThisInitialized(_this),\"_what\",void 0);_defineProperty(_assertThisInitialized(_this),\"_value\",void 0);invariant(!what._constant,'Value to be set cannot be constant');_this._what=what;_this._value=value;return _this;}_createClass(AnimatedSet,[{key:\"toString\",value:function toString(){return\"AnimatedSet, id: \".concat(this.__nodeID);}},{key:\"__onEvaluate\",value:function __onEvaluate(){var newValue=val(this._value);this._what.setValue(newValue);return newValue;}}]);return AnimatedSet;}(AnimatedNode);export function createAnimatedSet(what,value){return new AnimatedSet(what,adapt(value));}","map":{"version":3,"sources":["AnimatedSet.js"],"names":["constructor","invariant","what","value","type","toString","__onEvaluate","newValue","val","adapt"],"mappings":"4wCAAA,MAAA,CAAA,YAAA,sBACA,MAAA,CAAA,SAAA,KAAA,oBAAA,CACA,OAAA,GAAA,cACA,OAAA,KAAA,6B,GAEA,CAAA,W,mGAIEA,qBAAW,IAAXA,CAAW,KAAXA,CAAyB,6CACvBC,SAAS,CACPC,IAAI,WADG,CAAA,YAAA,CAAA,kFAAA,MAAA,CAATD,IAAS,CAAA,CAATA,CAIAA,SAAS,CACPE,KAAK,WADE,CAAA,YAAA,CAAA,qGAAA,MAAA,CAATF,KAAS,CAAA,CAATA,CAIA,uBAAM,CAAEG,IAAI,CAAN,KAAA,CAAeF,IAAf,CAAeA,IAAf,CAAqBC,KAAAA,CAAAA,KAArB,CAAN,CAAoC,CAApC,KAAoC,CAApC,EATuB,eAAA,+BAAA,OAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,+BAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAUvBF,SAAS,CAAC,CAACC,IAAI,CAAN,SAAA,CAATD,oCAAS,CAATA,CACA,MAAA,KAAA,CAAA,IAAA,CACA,MAAA,MAAA,CAAA,KAAA,CAZuB,aAaxB,C,gDAEDI,mBAAW,CACT,MAAA,oBAAA,MAAA,CAA2B,KAA3B,QAAA,CAAA,CACD,C,4BAEDC,uBAAe,CACb,GAAMC,CAAAA,QAAQ,CAAGC,GAAG,CAAC,KAArB,MAAoB,CAApB,CACA,KAAA,KAAA,CAAA,QAAA,CAAA,QAAA,EACA,MAAA,CAAA,QAAA,CACD,C,yBA3BH,Y,EA8BA,MAAO,SAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,KAAA,CAAwC,CAC7C,MAAO,IAAA,CAAA,WAAA,CAAA,IAAA,CAAsBC,KAAK,CAAlC,KAAkC,CAA3B,CAAP,CACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"]},"metadata":{},"sourceType":"module"}