{"ast":null,"code":"import{cond,sub,divide,multiply,add,block,set,greaterOrEq,proc}from\"../base\";var internalTiming=proc(function(clock,time,frameTime,position,finished,toValue,duration,nextProgress,progress,newFrameTime){var state={time:time,finished:finished,frameTime:frameTime,position:position};var config={duration:duration,toValue:toValue};var distanceLeft=sub(config.toValue,state.position);var fullDistance=divide(distanceLeft,sub(1,progress));var startPosition=sub(config.toValue,fullDistance);var nextPosition=add(startPosition,multiply(fullDistance,nextProgress));return block([cond(greaterOrEq(newFrameTime,config.duration),[set(state.position,config.toValue),set(state.finished,1)],set(state.position,nextPosition)),set(state.frameTime,newFrameTime),set(state.time,clock)]);});export default function(clock,state,config){if(config.duration===0){return block([set(state.position,config.toValue),set(state.finished,1)]);}var lastTime=cond(state.time,state.time,clock);var newFrameTime=add(state.frameTime,sub(clock,lastTime));var nextProgress=config.easing(divide(newFrameTime,config.duration));var progress=config.easing(divide(state.frameTime,config.duration));return internalTiming(clock,state.time,state.frameTime,state.position,state.finished,config.toValue,config.duration,nextProgress,progress,newFrameTime);}","map":{"version":3,"sources":["timing.js"],"names":["internalTiming","proc","state","time","finished","frameTime","position","config","duration","toValue","distanceLeft","sub","fullDistance","divide","startPosition","nextPosition","add","multiply","block","cond","greaterOrEq","set","lastTime","newFrameTime","nextProgress","progress"],"mappings":"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","sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  greaterOrEq,\n  proc,\n} from '../base';\n\nconst internalTiming = proc(function(\n  clock,\n  time,\n  frameTime,\n  position,\n  finished,\n  toValue,\n  duration,\n  nextProgress,\n  progress,\n  newFrameTime\n) {\n  const state = {\n    time,\n    finished,\n    frameTime,\n    position,\n  };\n\n  const config = {\n    duration,\n    toValue,\n  };\n\n  const distanceLeft = sub(config.toValue, state.position);\n  const fullDistance = divide(distanceLeft, sub(1, progress));\n  const startPosition = sub(config.toValue, fullDistance);\n  const nextPosition = add(startPosition, multiply(fullDistance, nextProgress));\n\n  return block([\n    cond(\n      greaterOrEq(newFrameTime, config.duration),\n      [set(state.position, config.toValue), set(state.finished, 1)],\n      set(state.position, nextPosition)\n    ),\n    set(state.frameTime, newFrameTime),\n    set(state.time, clock),\n  ]);\n});\n\nexport default function(clock, state, config) {\n  if (config.duration === 0) {\n    // when duration is zero we end the timing immediately\n    return block([set(state.position, config.toValue), set(state.finished, 1)]);\n  }\n  const lastTime = cond(state.time, state.time, clock);\n  const newFrameTime = add(state.frameTime, sub(clock, lastTime));\n  const nextProgress = config.easing(divide(newFrameTime, config.duration));\n  const progress = config.easing(divide(state.frameTime, config.duration));\n  return internalTiming(\n    clock,\n    state.time,\n    state.frameTime,\n    state.position,\n    state.finished,\n    config.toValue,\n    config.duration,\n    nextProgress,\n    progress,\n    newFrameTime\n  );\n}\n"]},"metadata":{},"sourceType":"module"}