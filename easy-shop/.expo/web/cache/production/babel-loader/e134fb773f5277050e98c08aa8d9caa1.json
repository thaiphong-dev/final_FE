{"ast":null,"code":"import processColor from\"react-native-web/dist/exports/processColor\";import{round}from\"../base\";import color from\"./color\";import interpolate,{Extrapolate}from\"./interpolate\";function red(c){return c>>16&255;}function green(c){return c>>8&255;}function blue(c){return c&255;}function opacity(c){return(c>>24&255)/255;}export default function interpolateColors(animationValue,options){var inputRange=options.inputRange,outputColorRange=options.outputColorRange;var colors=outputColorRange.map(processColor);var r=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(red),extrapolate:Extrapolate.CLAMP}));var g=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(green),extrapolate:Extrapolate.CLAMP}));var b=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(blue),extrapolate:Extrapolate.CLAMP}));var a=interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(opacity),extrapolate:Extrapolate.CLAMP});return color(r,g,b,a);}","map":{"version":3,"sources":["interpolateColors.js"],"names":["c","outputColorRange","colors","r","round","interpolate","inputRange","outputRange","extrapolate","Extrapolate","CLAMP","g","b","a","color"],"mappings":"qEACA,OAAA,KAAA,eACA,MAAA,CAAA,KAAA,eACA,MAAA,CAAA,WAAA,EAAA,WAAA,qBAEA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAgB,CACd,MAAQA,CAAAA,CAAC,EAAF,EAACA,CAAR,GAAA,CACD,CACD,QAAA,CAAA,KAAA,CAAA,CAAA,CAAkB,CAChB,MAAQA,CAAAA,CAAC,EAAF,CAACA,CAAR,GAAA,CACD,CACD,QAAA,CAAA,IAAA,CAAA,CAAA,CAAiB,CACf,MAAOA,CAAAA,CAAC,CAAR,GAAA,CACD,CACD,QAAA,CAAA,OAAA,CAAA,CAAA,CAAoB,CAClB,MAAO,CAAEA,CAAC,EAAF,EAACA,CAAF,GAAA,EAAP,GAAA,CACD,CAaD,cAAe,SAAA,CAAA,iBAAA,CAAA,cAAA,CAAA,OAAA,CAAoD,CACjE,GAAM,CAAA,UAAN,CAAA,OAAA,CAAM,UAAN,CAAoBC,gBAApB,CAAA,OAAA,CAAoBA,gBAApB,CACA,GAAMC,CAAAA,MAAM,CAAGD,gBAAgB,CAAhBA,GAAAA,CAAf,YAAeA,CAAf,CAEA,GAAME,CAAAA,CAAC,CAAGC,KAAK,CACbC,WAAW,CAAA,cAAA,CAAiB,CAC1BC,UAD0B,CAC1BA,UAD0B,CAE1BC,WAAW,CAAEL,MAAM,CAANA,GAAAA,CAFa,GAEbA,CAFa,CAG1BM,WAAW,CAAEC,WAAW,CAACC,KAHC,CAAjB,CADE,CAAf,CAOA,GAAMC,CAAAA,CAAC,CAAGP,KAAK,CACbC,WAAW,CAAA,cAAA,CAAiB,CAC1BC,UAD0B,CAC1BA,UAD0B,CAE1BC,WAAW,CAAEL,MAAM,CAANA,GAAAA,CAFa,KAEbA,CAFa,CAG1BM,WAAW,CAAEC,WAAW,CAACC,KAHC,CAAjB,CADE,CAAf,CAOA,GAAME,CAAAA,CAAC,CAAGR,KAAK,CACbC,WAAW,CAAA,cAAA,CAAiB,CAC1BC,UAD0B,CAC1BA,UAD0B,CAE1BC,WAAW,CAAEL,MAAM,CAANA,GAAAA,CAFa,IAEbA,CAFa,CAG1BM,WAAW,CAAEC,WAAW,CAACC,KAHC,CAAjB,CADE,CAAf,CAOA,GAAMG,CAAAA,CAAC,CAAGR,WAAW,CAAA,cAAA,CAAiB,CACpCC,UADoC,CACpCA,UADoC,CAEpCC,WAAW,CAAEL,MAAM,CAANA,GAAAA,CAFuB,OAEvBA,CAFuB,CAGpCM,WAAW,CAAEC,WAAW,CAACC,KAHW,CAAjB,CAArB,CAMA,MAAOI,CAAAA,KAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAZ,CAAY,CAAZ,CACD","sourcesContent":["import { processColor } from 'react-native';\nimport { round } from '../base';\nimport color from './color';\nimport interpolate, { Extrapolate } from './interpolate';\n\nfunction red(c) {\n  return (c >> 16) & 255;\n}\nfunction green(c) {\n  return (c >> 8) & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return ((c >> 24) & 255) / 255;\n}\n\n/**\n * Use this if you want to interpolate an `Animated.Value` into color values.\n *\n * #### Why is this needed?\n *\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\n * of `interpolate()` function, that won't really work (at least at the moment).\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\n *\n * So, for now you can just use this helper instead.\n */\nexport default function interpolateColors(animationValue, options) {\n  const { inputRange, outputColorRange } = options;\n  const colors = outputColorRange.map(processColor);\n\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(red),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(green),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(blue),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n}\n"]},"metadata":{},"sourceType":"module"}