{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import invariant from'fbjs/lib/invariant';import{adapt}from\"../core/AnimatedBlock\";import AnimatedNode from\"./AnimatedNode\";import{val}from\"../val\";var AnimatedConcat=function(_AnimatedNode){_inherits(AnimatedConcat,_AnimatedNode);var _super=_createSuper(AnimatedConcat);function AnimatedConcat(input){var _this;_classCallCheck(this,AnimatedConcat);invariant(input.every(function(el){return el instanceof AnimatedNode||typeof el==='number'||typeof el==='string';}),\"Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: \".concat(input));_this=_super.call(this,{type:'concat',input:input},input);_this._input=input;return _this;}_createClass(AnimatedConcat,[{key:\"__onEvaluate\",value:function __onEvaluate(){return this._input.reduce(function(prev,current){return prev+val(current);},'');}},{key:\"toString\",value:function toString(){return\"AnimatedConcat, id: \".concat(this.__nodeID);}}]);return AnimatedConcat;}(AnimatedNode);export function createAnimatedConcat(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return new AnimatedConcat(args.map(adapt));}","map":{"version":3,"sources":["AnimatedConcat.js"],"names":["constructor","invariant","input","el","type","__onEvaluate","prev","val","toString","args"],"mappings":"qgCAAA,MAAA,CAAA,SAAA,KAAA,oBAAA,CACA,OAAA,KAAA,6BACA,MAAA,CAAA,YAAA,sBACA,OAAA,GAAA,c,GAEA,CAAA,c,yGACEA,wBAAW,KAAXA,CAAmB,gDACjBC,SAAS,CACPC,KAAK,CAALA,KAAAA,CACEC,SAAAA,EAAE,QACAA,CAAAA,EAAE,WAAFA,CAAAA,YAAAA,EACA,MAAA,CAAA,EAAA,GADAA,QAAAA,EAEA,MAAA,CAAA,EAAA,GALG,QAEH,EADJD,CADO,CAAA,kJAAA,MAAA,CAATD,KAAS,CAAA,CAATA,CASA,uBAAM,CAAEG,IAAI,CAAN,QAAA,CAAkBF,KAAAA,CAAAA,KAAlB,CAAN,CAAA,KAAA,EACA,MAAA,MAAA,CAAA,KAAA,CAXiB,aAYlB,C,uDAEDG,uBAAe,CACb,MAAO,MAAA,MAAA,CAAA,MAAA,CAAmB,SAAA,IAAA,CAAA,OAAA,QAAmBC,CAAAA,IAAI,CAAGC,GAAG,CAAhD,OAAgD,CAA7B,EAAnB,CAAP,EAAO,CAAP,CACD,C,wBAEDC,mBAAW,CACT,MAAA,uBAAA,MAAA,CAA8B,KAA9B,QAAA,CAAA,CACD,C,4BArBH,Y,EAwBA,MAAO,SAAA,CAAA,oBAAA,EAAuC,+BAAvC,IAAuC,0CAAvC,IAAuC,wBAC5C,MAAO,IAAA,CAAA,cAAA,CAAmBC,IAAI,CAAJA,GAAAA,CAA1B,KAA0BA,CAAnB,CAAP,CACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'number' ||\n          typeof el === 'string'\n      ),\n      `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`\n    );\n    super({ type: 'concat', input }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n\n  toString() {\n    return `AnimatedConcat, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}