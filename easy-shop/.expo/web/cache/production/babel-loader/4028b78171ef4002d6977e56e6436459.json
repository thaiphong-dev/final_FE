{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import AnimatedNode from\"./AnimatedNode\";import{val}from\"../val\";import invariant from'fbjs/lib/invariant';import{adapt}from\"../core/AnimatedBlock\";function reduce(fn){return function(input){return input.reduce(function(a,b){return fn(val(a),val(b));});};}function reduceFrom(fn,initialValue){return function(input){return input.reduce(function(a,b){return fn(val(a),val(b));},initialValue);};}function infix(fn){return function(input){return fn(val(input[0]),val(input[1]));};}function single(fn){return function(input){return fn(val(input[0]));};}var OPERATIONS={add:reduce(function(a,b){return a+b;}),sub:reduce(function(a,b){return a-b;}),multiply:reduce(function(a,b){return a*b;}),divide:reduce(function(a,b){return a/b;}),pow:reduce(function(a,b){return Math.pow(a,b);}),modulo:reduce(function(a,b){return(a%b+b)%b;}),sqrt:single(function(a){return Math.sqrt(a);}),log:single(function(a){return Math.log(a);}),sin:single(function(a){return Math.sin(a);}),cos:single(function(a){return Math.cos(a);}),tan:single(function(a){return Math.tan(a);}),acos:single(function(a){return Math.acos(a);}),asin:single(function(a){return Math.asin(a);}),atan:single(function(a){return Math.atan(a);}),exp:single(function(a){return Math.exp(a);}),round:single(function(a){return Math.round(a);}),abs:single(function(a){return Math.abs(a);}),ceil:single(function(a){return Math.ceil(a);}),floor:single(function(a){return Math.floor(a);}),max:reduce(function(a,b){return Math.max(a,b);}),min:reduce(function(a,b){return Math.min(a,b);}),and:reduceFrom(function(a,b){return a&&b;},true),or:reduceFrom(function(a,b){return a||b;},false),not:single(function(a){return!a;}),defined:single(function(a){return a!==null&&a!==undefined&&!isNaN(a);}),lessThan:infix(function(a,b){return a<b;}),eq:infix(function(a,b){return a==b;}),greaterThan:infix(function(a,b){return a>b;}),lessOrEq:infix(function(a,b){return a<=b;}),greaterOrEq:infix(function(a,b){return a>=b;}),neq:infix(function(a,b){return a!=b;})};var AnimatedOperator=function(_AnimatedNode){_inherits(AnimatedOperator,_AnimatedNode);var _super=_createSuper(AnimatedOperator);function AnimatedOperator(operator,input){var _this;_classCallCheck(this,AnimatedOperator);invariant(typeof operator==='string',\"Reanimated: Animated.operator node first argument should be of type String, but got: \".concat(operator));invariant(input.every(function(el){return el instanceof AnimatedNode||typeof el==='string'||typeof el==='number';}),\"Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got \".concat(input));_this=_super.call(this,{type:'op',op:operator,input:input},input);_defineProperty(_assertThisInitialized(_this),\"_input\",void 0);_defineProperty(_assertThisInitialized(_this),\"_op\",void 0);_defineProperty(_assertThisInitialized(_this),\"_operation\",void 0);_this._op=operator;_this._input=input;return _this;}_createClass(AnimatedOperator,[{key:\"toString\",value:function toString(){return\"AnimatedOperator, id: \".concat(this.__nodeID);}},{key:\"__onEvaluate\",value:function __onEvaluate(){if(!this._operation){this._operation=OPERATIONS[this._op];invariant(this._operation,\"Illegal operator '%s'\",this._op);}return this._operation(this._input);}}]);return AnimatedOperator;}(AnimatedNode);export function createAnimatedOperator(name){return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return new AnimatedOperator(name,args.map(adapt));};}","map":{"version":3,"sources":["AnimatedOperator.js"],"names":["input","fn","val","OPERATIONS","add","reduce","a","sub","multiply","divide","pow","Math","modulo","sqrt","single","log","sin","cos","tan","acos","asin","atan","exp","round","abs","ceil","floor","max","min","and","reduceFrom","or","not","defined","isNaN","lessThan","infix","eq","greaterThan","lessOrEq","greaterOrEq","neq","constructor","invariant","el","type","op","toString","__onEvaluate","args"],"mappings":"4wCAAA,MAAA,CAAA,YAAA,sBACA,OAAA,GAAA,cAEA,MAAA,CAAA,SAAA,KAAA,oBAAA,CACA,OAAA,KAAA,6BAEA,QAAA,CAAA,MAAA,CAAA,EAAA,CAAoB,CAClB,MAAOA,UAAAA,KAAK,QAAIA,CAAAA,KAAK,CAALA,MAAAA,CAAa,SAAA,CAAA,CAAA,CAAA,QAAUC,CAAAA,EAAE,CAACC,GAAG,CAAJ,CAAI,CAAJ,CAASA,GAAG,CAArD,CAAqD,CAAZ,CAAZ,EAAbF,CAAJ,EAAZ,CACD,CAED,QAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,CAAsC,CACpC,MAAOA,UAAAA,KAAK,QAAIA,CAAAA,KAAK,CAALA,MAAAA,CAAa,SAAA,CAAA,CAAA,CAAA,QAAUC,CAAAA,EAAE,CAACC,GAAG,CAAJ,CAAI,CAAJ,CAASA,GAAG,CAArCF,CAAqC,CAAZ,CAAZ,EAAbA,CAAhB,YAAgBA,CAAJ,EAAZ,CACD,CAED,QAAA,CAAA,KAAA,CAAA,EAAA,CAAmB,CACjB,MAAOA,UAAAA,KAAK,QAAIC,CAAAA,EAAE,CAACC,GAAG,CAACF,KAAK,CAAV,CAAU,CAAN,CAAJ,CAAgBE,GAAG,CAACF,KAAK,CAA3C,CAA2C,CAAN,CAAnB,CAAN,EAAZ,CACD,CAED,QAAA,CAAA,MAAA,CAAA,EAAA,CAAoB,CAClB,MAAOA,UAAAA,KAAK,QAAIC,CAAAA,EAAE,CAACC,GAAG,CAACF,KAAK,CAA5B,CAA4B,CAAN,CAAJ,CAAN,EAAZ,CACD,CAED,GAAMG,CAAAA,UAAU,CAAG,CAEjBC,GAAG,CAAEC,MAAM,CAAC,SAAA,CAAA,CAAA,CAAA,QAAUC,CAAAA,CAAC,CAFN,CAEL,EAAD,CAFM,CAGjBC,GAAG,CAAEF,MAAM,CAAC,SAAA,CAAA,CAAA,CAAA,QAAUC,CAAAA,CAAC,CAHN,CAGL,EAAD,CAHM,CAIjBE,QAAQ,CAAEH,MAAM,CAAC,SAAA,CAAA,CAAA,CAAA,QAAUC,CAAAA,CAAC,CAJX,CAIA,EAAD,CAJC,CAKjBG,MAAM,CAAEJ,MAAM,CAAC,SAAA,CAAA,CAAA,CAAA,QAAUC,CAAAA,CAAC,CALT,CAKF,EAAD,CALG,CAMjBI,GAAG,CAAEL,MAAM,CAAC,SAAA,CAAA,CAAA,CAAA,QAAUM,CAAAA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,CANL,CAMKA,CAAV,EAAD,CANM,CAOjBC,MAAM,CAAEP,MAAM,CAAC,SAAA,CAAA,CAAA,CAAA,QAAU,CAAEC,CAAC,CAAF,CAACA,CAAF,CAAA,EAPR,CAOF,EAAD,CAPG,CAQjBO,IAAI,CAAEC,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,IAAAA,CARD,CAQCA,CAAJ,EAAF,CARK,CASjBI,GAAG,CAAED,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,GAAAA,CATA,CASAA,CAAJ,EAAF,CATM,CAUjBK,GAAG,CAAEF,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,GAAAA,CAVA,CAUAA,CAAJ,EAAF,CAVM,CAWjBM,GAAG,CAAEH,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,GAAAA,CAXA,CAWAA,CAAJ,EAAF,CAXM,CAYjBO,GAAG,CAAEJ,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,GAAAA,CAZA,CAYAA,CAAJ,EAAF,CAZM,CAajBQ,IAAI,CAAEL,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,IAAAA,CAbD,CAaCA,CAAJ,EAAF,CAbK,CAcjBS,IAAI,CAAEN,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,IAAAA,CAdD,CAcCA,CAAJ,EAAF,CAdK,CAejBU,IAAI,CAAEP,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,IAAAA,CAfD,CAeCA,CAAJ,EAAF,CAfK,CAgBjBW,GAAG,CAAER,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,GAAAA,CAhBA,CAgBAA,CAAJ,EAAF,CAhBM,CAiBjBY,KAAK,CAAET,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,KAAAA,CAjBF,CAiBEA,CAAJ,EAAF,CAjBI,CAkBjBa,GAAG,CAAEV,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,GAAAA,CAlBA,CAkBAA,CAAJ,EAAF,CAlBM,CAmBjBc,IAAI,CAAEX,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,IAAAA,CAnBD,CAmBCA,CAAJ,EAAF,CAnBK,CAoBjBe,KAAK,CAAEZ,MAAM,CAACR,SAAAA,CAAC,QAAIK,CAAAA,IAAI,CAAJA,KAAAA,CApBF,CAoBEA,CAAJ,EAAF,CApBI,CAqBjBgB,GAAG,CAAEtB,MAAM,CAAC,SAAA,CAAA,CAAA,CAAA,QAASM,CAAAA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,CArBJ,CAqBIA,CAAT,EAAD,CArBM,CAsBjBiB,GAAG,CAAEvB,MAAM,CAAC,SAAA,CAAA,CAAA,CAAA,QAASM,CAAAA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,CAtBJ,CAsBIA,CAAT,EAAD,CAtBM,CAyBjBkB,GAAG,CAAEC,UAAU,CAAC,SAAA,CAAA,CAAA,CAAA,QAAUxB,CAAAA,CAAC,EAAZ,CAAC,EAAD,CAzBE,IAyBF,CAzBE,CA0BjByB,EAAE,CAAED,UAAU,CAAC,SAAA,CAAA,CAAA,CAAA,QAAUxB,CAAAA,CAAC,EAAZ,CAAC,EAAD,CA1BG,KA0BH,CA1BG,CA2BjB0B,GAAG,CAAElB,MAAM,CAACR,SAAAA,CAAC,QAAI,CA3BA,CA2BJ,EAAF,CA3BM,CA4BjB2B,OAAO,CAAEnB,MAAM,CAACR,SAAAA,CAAC,QAAIA,CAAAA,CAAC,GAADA,IAAAA,EAAcA,CAAC,GAAfA,SAAAA,EAAiC,CAAC4B,KAAK,CA5B3C,CA4B2C,CAA3C,EAAF,CA5BE,CA+BjBC,QAAQ,CAAEC,KAAK,CAAC,SAAA,CAAA,CAAA,CAAA,QAAU9B,CAAAA,CAAC,CA/BV,CA+BD,EAAD,CA/BE,CAiCjB+B,EAAE,CAAED,KAAK,CAAC,SAAA,CAAA,CAAA,CAAA,QAAU9B,CAAAA,CAAC,EAjCJ,CAiCP,EAAD,CAjCQ,CAkCjBgC,WAAW,CAAEF,KAAK,CAAC,SAAA,CAAA,CAAA,CAAA,QAAU9B,CAAAA,CAAC,CAlCb,CAkCE,EAAD,CAlCD,CAmCjBiC,QAAQ,CAAEH,KAAK,CAAC,SAAA,CAAA,CAAA,CAAA,QAAU9B,CAAAA,CAAC,EAnCV,CAmCD,EAAD,CAnCE,CAoCjBkC,WAAW,CAAEJ,KAAK,CAAC,SAAA,CAAA,CAAA,CAAA,QAAU9B,CAAAA,CAAC,EApCb,CAoCE,EAAD,CApCD,CAsCjBmC,GAAG,CAAEL,KAAK,CAAC,SAAA,CAAA,CAAA,CAAA,QAAU9B,CAAAA,CAAC,EAAZ,CAAC,EAAD,CAtCO,CAAnB,C,GAyCA,CAAA,gB,6GAKEoC,0BAAW,QAAXA,CAAW,KAAXA,CAA6B,kDAC3BC,SAAS,CACP,MAAA,CAAA,QAAA,GADO,QAAA,CAAA,wFAAA,MAAA,CAATA,QAAS,CAAA,CAATA,CAIAA,SAAS,CACP3C,KAAK,CAALA,KAAAA,CACE4C,SAAAA,EAAE,QACAA,CAAAA,EAAE,WAAFA,CAAAA,YAAAA,EACA,MAAA,CAAA,EAAA,GADAA,QAAAA,EAEA,MAAA,CAAA,EAAA,GALG,QAEH,EADJ5C,CADO,CAAA,2HAAA,MAAA,CAAT2C,KAAS,CAAA,CAATA,CASA,uBACE,CAAEE,IAAI,CAAN,IAAA,CAAcC,EAAE,CAAhB,QAAA,CAA4B9C,KAAAA,CAAAA,KAA5B,CADF,CAAA,KAAA,EAd2B,eAAA,+BAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,+BAAA,KAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,+BAAA,YAAA,CAAA,IAAA,EAAA,CAAA,CAkB3B,MAAA,GAAA,CAAA,QAAA,CACA,MAAA,MAAA,CAAA,KAAA,CAnB2B,aAoB5B,C,qDAED+C,mBAAW,CACT,MAAA,yBAAA,MAAA,CAAgC,KAAhC,QAAA,CAAA,CACD,C,4BAEDC,uBAAe,CACb,GAAI,CAAC,KAAL,UAAA,CAAsB,CACpB,KAAA,UAAA,CAAkB7C,UAAU,CAAC,KAA7B,GAA4B,CAA5B,CACAwC,SAAS,CAAC,KAAD,UAAA,CAAA,uBAAA,CAA2C,KAApDA,GAAS,CAATA,CACD,CACD,MAAO,MAAA,UAAA,CAAgB,KAAvB,MAAO,CAAP,CACD,C,8BArCH,Y,EAwCA,MAAO,SAAA,CAAA,sBAAA,CAAA,IAAA,CAAsC,CAC3C,MAAO,0CAAA,IAAA,0CAAA,IAAA,8BAAa,IAAA,CAAA,gBAAA,CAAA,IAAA,CAA2BM,IAAI,CAAJA,GAAAA,CAA/C,KAA+CA,CAA3B,CAAb,EAAP,CACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n  abs: single(a => Math.abs(a)),\n  ceil: single(a => Math.ceil(a)),\n  floor: single(a => Math.floor(a)),\n  max: reduce((a,b) => Math.max(a, b)),\n  min: reduce((a,b) => Math.min(a, b)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(\n      typeof operator === 'string',\n      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`\n    );\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'string' ||\n          typeof el === 'number'\n      ),\n      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`\n    );\n    super(\n      { type: 'op', op: operator, input },\n      input\n    );\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}