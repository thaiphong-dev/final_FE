{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function _toPropertyKey(arg){var key=_toPrimitive(arg,\"string\");return typeof key===\"symbol\"?key:String(key);}function _toPrimitive(input,hint){if(typeof input!==\"object\"||input===null)return input;var prim=input[Symbol.toPrimitive];if(prim!==undefined){var res=prim.call(input,hint||\"default\");if(typeof res!==\"object\")return res;throw new TypeError(\"@@toPrimitive must return a primitive value.\");}return(hint===\"string\"?String:Number)(input);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import SceneView from\"./SceneView\";import NavigationBuilderContext from\"./NavigationBuilderContext\";import useNavigationCache from\"./useNavigationCache\";import useRouteCache from\"./useRouteCache\";import NavigationContext from\"./NavigationContext\";import NavigationRouteContext from\"./NavigationRouteContext\";export default function useDescriptors(_ref){var state=_ref.state,screens=_ref.screens,navigation=_ref.navigation,screenOptions=_ref.screenOptions,defaultScreenOptions=_ref.defaultScreenOptions,onAction=_ref.onAction,getState=_ref.getState,setState=_ref.setState,addListener=_ref.addListener,addKeyedListener=_ref.addKeyedListener,onRouteFocus=_ref.onRouteFocus,router=_ref.router,emitter=_ref.emitter;var _React$useState=React.useState({}),_React$useState2=_slicedToArray(_React$useState,2),options=_React$useState2[0],setOptions=_React$useState2[1];var _React$useContext=React.useContext(NavigationBuilderContext),onDispatchAction=_React$useContext.onDispatchAction,onOptionsChange=_React$useContext.onOptionsChange;var context=React.useMemo(function(){return{navigation:navigation,onAction:onAction,addListener:addListener,addKeyedListener:addKeyedListener,onRouteFocus:onRouteFocus,onDispatchAction:onDispatchAction,onOptionsChange:onOptionsChange};},[navigation,onAction,addListener,addKeyedListener,onRouteFocus,onDispatchAction,onOptionsChange]);var navigations=useNavigationCache({state:state,getState:getState,navigation:navigation,setOptions:setOptions,router:router,emitter:emitter});var routes=useRouteCache(state.routes);return routes.reduce(function(acc,route,i){var screen=screens[route.name];var navigation=navigations[route.key];var routeOptions=_objectSpread(_objectSpread(_objectSpread({},typeof screenOptions==='object'||screenOptions==null?screenOptions:screenOptions({route:route,navigation:navigation})),typeof screen.options==='object'||screen.options==null?screen.options:screen.options({route:route,navigation:navigation})),options[route.key]);var mergedOptions=_objectSpread(_objectSpread({},typeof defaultScreenOptions==='function'?defaultScreenOptions({route:route,navigation:navigation,options:routeOptions}):defaultScreenOptions),routeOptions);var clearOptions=function clearOptions(){return setOptions(function(o){if(route.key in o){var _route$key=route.key,_=o[_route$key],rest=_objectWithoutProperties(o,[_route$key].map(_toPropertyKey));return rest;}return o;});};acc[route.key]={navigation:navigation,render:function render(){return React.createElement(NavigationBuilderContext.Provider,{key:route.key,value:context},React.createElement(NavigationContext.Provider,{value:navigation},React.createElement(NavigationRouteContext.Provider,{value:route},React.createElement(SceneView,{navigation:navigation,route:route,screen:screen,routeState:state.routes[i].state,getState:getState,setState:setState,options:mergedOptions,clearOptions:clearOptions}))));},options:mergedOptions};return acc;},{});}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","onOptionsChange","context","navigation","onAction","addListener","addKeyedListener","onRouteFocus","onDispatchAction","navigations","useNavigationCache","state","getState","setOptions","router","routes","useRouteCache","screen","screens","route","routeOptions","screenOptions","options","mergedOptions","defaultScreenOptions","clearOptions","o","rest","acc","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: routeOptions,\n          })\n        : defaultScreenOptions),\n      ...routeOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}